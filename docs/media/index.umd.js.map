{"version":3,"file":"index.umd.js","sources":["../src/text/toNormal.ts","../src/text/normalIndexOf.ts","../src/constants/INDEXER_CHARS_BOUNDARIES.ts","../src/constants/INDEXER_CHARS_CAPITAL.ts","../src/constants/INDEXER_CHARS_IGNORE.ts","../src/constants/INDEXER_CHARS_QUOTE.ts","../src/builders/indexExact.ts","../src/builders/indexGetWords.ts","../src/IndexService.ts","../src/IndexServiceBuilder.ts"],"sourcesContent":["/** Removes diacritics\n *\n * @param text text to process\n * @param processed text\n */\nexport function toNormal(text: string): string {\n  return text.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\n","import { toNormal } from './toNormal';\n\n/**\n * Gets the index of the text ignoring diacritics\n *\n * @param searchText text to search\n * @param findText text to find\n */\nexport function normalIndexOf(searchText: string, findText: string): number {\n  if (searchText && findText) {\n    searchText = toNormal(searchText).toLowerCase();\n    findText = toNormal(findText).toLowerCase();\n\n    return searchText.indexOf(findText);\n  }\n\n  return -1;\n}\n","/** word boundary chars */\nexport const INDEXER_CHARS_BOUNDARIES =\n  ' \\t\\n\\r\\v!\"£$%^&*()_+{}[]:@~;#?,./|¬=<>';\n","/** Capital chars */\nexport const INDEXER_CHARS_CAPITAL = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n","/** chars to ignore */\nexport const INDEXER_CHARS_IGNORE = \"-'`\";\n","/** quote chars */\nexport const INDEXER_CHARS_QUOTE = '\"';\n","import { toNormal } from '../text/index';\nimport { INDEXER_CHARS_IGNORE } from '../constants/index';\n\n/** index the input exactly\n *\n * @param input input to be indexed\n */\nexport function indexExact(input: any): string[] {\n  if (!input) return [];\n\n  return [\n    Array.from(toNormal(`${input}`))\n      .reduce(\n        (s, c) =>\n          INDEXER_CHARS_IGNORE.includes(c) ? s : [...s, c.toLowerCase()],\n        []\n      )\n      .join(''),\n  ];\n}\n","import { toNormal } from '../text/index';\nimport {\n  INDEXER_CHARS_IGNORE,\n  INDEXER_CHARS_QUOTE,\n  INDEXER_CHARS_CAPITAL,\n  INDEXER_CHARS_BOUNDARIES,\n} from '../constants/index';\n\n/**\n * Extacts words from the text passed\n *\n * @param text text to get words from\n * @param splitCapitals split capitalised\n */\nexport function indexGetWords(text: string): string[] {\n  if (!text) return [];\n\n  const is = (c: string, m: string): boolean => m.indexOf(c) !== -1;\n\n  text = toNormal(text + ' ');\n  const words: string[] = [];\n  let word: string[] = [];\n  let wordType = null;\n  let nextWordType = null;\n  let quote = '';\n\n  for (let i = 0; i < text.length; i++) {\n    const c = text.charAt(i);\n    let ignore = false;\n    let isBreak = false;\n\n    if (quote === c) {\n      quote = '';\n      isBreak = true;\n      ignore = true;\n    } else if (is(c, INDEXER_CHARS_QUOTE)) {\n      quote = c;\n      isBreak = true;\n      ignore = true;\n    }\n\n    if (i === text.length - 1) quote = ''; // close quote on last char regardless\n\n    if (!quote) {\n      if (is(c, INDEXER_CHARS_IGNORE)) {\n        ignore = true;\n      } else if (is(c, INDEXER_CHARS_BOUNDARIES)) {\n        if (wordType != null && wordType !== indexWordType.boundary)\n          isBreak = true;\n\n        ignore = true;\n        nextWordType = indexWordType.boundary;\n      } else if (is(c, INDEXER_CHARS_CAPITAL)) {\n        if (wordType != null && wordType !== indexWordType.textCapitals)\n          isBreak = true;\n\n        nextWordType = indexWordType.textCapitals;\n      } else {\n        if (\n          wordType != null &&\n          !(\n            wordType === indexWordType.text ||\n            wordType === indexWordType.textCapitals\n          )\n        )\n          isBreak = true;\n\n        nextWordType = indexWordType.text;\n      }\n    }\n\n    if (!quote && isBreak && word.length) {\n      words.push(word.join('').toLowerCase());\n      if (wordType === indexWordType.textCapitals && word.length > 1)\n        word.forEach((wc) => words.push(wc.toLowerCase()));\n\n      word = [];\n    }\n\n    if (!ignore) word.push(c);\n    wordType = nextWordType;\n  }\n\n  return words;\n}\n\nexport enum indexWordType {\n  text,\n  textCapitals,\n  boundary,\n}\n","import { IIndexTerm } from './IIndexTerm';\r\nimport { IIndexSearchOptions } from './IIndexSearchOptions';\r\nimport { IIndexSearchResultItem } from './IIndexSearchResultItem';\r\nimport { indexGetWords } from './builders/index';\r\nimport { IndexServiceBuilder } from './IndexServiceBuilder';\r\n\r\n/** index service */\r\nexport class IndexService<T> {\r\n  private emptyQueryResults: IIndexSearchResultItem<T>[];\r\n\r\n  constructor(\r\n    /** all items */\r\n    readonly all: T[],\r\n    private readonly terms: IIndexTerm<T>[],\r\n    private readonly builder: IndexServiceBuilder<T>\r\n  ) {\r\n    this.emptyQueryResults = all.map((item) => ({ item, rank: 0 }));\r\n  }\r\n\r\n  /** search the index\r\n   *\r\n   * @param query text to find\r\n   * @param options search options\r\n   *\r\n   * @returns array of item results\r\n   */\r\n  search(\r\n    query?: string,\r\n    options?: IIndexSearchOptions\r\n  ): IIndexSearchResultItem<T>[] {\r\n    if (!query) return options?.queryRequired ? [] : this.emptyQueryResults;\r\n\r\n    const words = indexGetWords(query);\r\n\r\n    let all = words.reduce<any[]>((results, word, wordIndex) => {\r\n      this.terms.forEach((term) => {\r\n        if (term.value.startsWith(word)) {\r\n          let result = results.find((r) => r.item === term.item);\r\n          if (result) result.rank += 1;\r\n          else {\r\n            result = {\r\n              item: term.item,\r\n              rank: 0,\r\n              lastIndex: 0,\r\n              matches: {},\r\n            };\r\n            results.push(result);\r\n          }\r\n\r\n          result.rank += word.length / term.value.length;\r\n\r\n          if (!result.matches[wordIndex] && term.distance >= result.lastIndex)\r\n            result.rank += 1 / Math.pow(2, term.distance - result.lastIndex);\r\n\r\n          result.matches[wordIndex] = true;\r\n          result.lastIndex = term.distance;\r\n        }\r\n      });\r\n\r\n      return results;\r\n    }, []);\r\n\r\n    if (options) {\r\n      if (options.matchThreshold) {\r\n        const matchThreshold = options.matchThreshold;\r\n        all = all.filter(\r\n          (r) => Object.keys(r.matches).length >= matchThreshold\r\n        );\r\n      }\r\n    }\r\n\r\n    all.sort((a, b) => (a.rank > b.rank ? -1 : a.rank < b.rank ? 1 : 0));\r\n\r\n    return all.map((i) => ({\r\n      item: i.item,\r\n      rank: i.rank,\r\n    }));\r\n  }\r\n\r\n  /** Build another service with the same term builders\r\n   *\r\n   * @param items items to index\r\n   */\r\n  build(items: T[]): IndexService<T> {\r\n    return this.builder.build(items);\r\n  }\r\n}\r\n","import { IIndexTerm } from './IIndexTerm';\r\nimport { TermValuesBuilder } from './builders/index';\r\nimport { IndexService } from './IndexService';\r\n\r\n/** Index service builder */\r\nexport class IndexServiceBuilder<T> {\r\n  /** create an service builder for the given type */\r\n  static create<T>() {\r\n    return new IndexServiceBuilder<T>([]);\r\n  }\r\n\r\n  /** use IndexServiceBuilder.create<T>() to create a service builder */\r\n  private constructor(private readonly termBuilders: TermValuesBuilder<T>[]) {}\r\n\r\n  /** adds a term builder */\r\n  add(termBuilder: TermValuesBuilder<T>): IndexServiceBuilder<T> {\r\n    return new IndexServiceBuilder<T>([...this.termBuilders, termBuilder]);\r\n  }\r\n\r\n  /** build index on items passed using added builders */\r\n  build(items: T[]): IndexService<T> {\r\n    return new IndexService<T>(\r\n      items,\r\n      items.reduce<IIndexTerm<T>[]>((terms, item) => {\r\n        this.termBuilders.forEach((indexer) => {\r\n          terms = terms.concat(\r\n            indexer(item)\r\n              .filter((value) => value != null)\r\n              .map((value, distance) => ({\r\n                value,\r\n                distance,\r\n                item,\r\n              }))\r\n          );\r\n        });\r\n\r\n        return terms;\r\n      }, []),\r\n      this\r\n    );\r\n  }\r\n}\r\n"],"names":["indexWordType"],"mappings":"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"}